package GUI;
import Logic.Appointment;
import Logic.Child;
import Logic.LogicSystem;
import Logic.Vaccine;
import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.SwingConstants;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
public class vPrincipal extends javax.swing.JFrame {

    LogicSystem sistema;
    LocalDate fechaNacimiento = null;
    LocalDate fechaCrecimiento = null;
    LocalDate fechaConsulta = null;
    Child selectedChild = null;
    ArrayList<Appointment> consultasAnteriores = new ArrayList <Appointment>();
    ArrayList<Appointment> consultasProximas = new ArrayList <Appointment>();
    
    public vPrincipal(LogicSystem s) {
        sistema = s;
        initComponents(); 
        checkBoxRealizadaProximasConsultas.setHorizontalTextPosition(SwingConstants.LEFT);
        checkBoxRealizadaConsultasAnteriores.setHorizontalTextPosition(SwingConstants.LEFT);
        checkBoxVacunaObligatoria.setHorizontalTextPosition(SwingConstants.LEFT);
        
        //Cargo los datos de los hijos en el ComboBox y muestro la fecha correspondiente
        comboBoxHijos.setModel(new DefaultComboBoxModel(sistema.getListAllChildren().toArray()));
        this.cargarHijoDelComboBox();
        //Cargo Consultas Hijos
        this.cargarAppointmentDeHijo();      
        //Cargo datos en la lista de vacunas
        this.cargarVacunasHijo();
        
        //Setteo los carteles de error para que no sean visibles
        textErrorNombreAgregarHijo.setVisible(false);
        textErrorFechaNacimientoAgregarHijo.setVisible(false); 
        textErrorFechaAgregarCrecimiento.setVisible(false);
        jLabelErrAlt.setVisible(false);
        jLabelErrPeso.setVisible(false);
        jLabelErrPermie.setVisible(false);     
        textErrorFechaAgregarConsulta.setVisible(false);
        textErrorNoChild.setVisible(false);
        
        updateChart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        tabHijos = new javax.swing.JPanel();
        labelNombre = new javax.swing.JLabel();
        labelFechaNacimiento = new javax.swing.JLabel();
        comboBoxHijos = new javax.swing.JComboBox();
        tituloHijosRegistrados = new javax.swing.JLabel();
        textFechaNacimiento = new javax.swing.JTextField();
        labelNombreAgregarHijo = new javax.swing.JLabel();
        labelFechaNacimientoAgregarHijo = new javax.swing.JLabel();
        textNombreAgregarHijo = new javax.swing.JTextField();
        tituloAgregarHijo = new javax.swing.JLabel();
        datePickerFechaNacimientoAgregarHijo = new org.jdesktop.swingx.JXDatePicker();
        buttonAceptarAgregarHijo = new javax.swing.JButton();
        buttonCancelarAgregarHijo = new javax.swing.JButton();
        textErrorNombreAgregarHijo = new javax.swing.JLabel();
        textErrorFechaNacimientoAgregarHijo = new javax.swing.JLabel();
        tabAgenda = new javax.swing.JPanel();
        tituloProximasConsultas = new javax.swing.JLabel();
        labelFechaProximasConsultas = new javax.swing.JLabel();
        paneFechaProximasConsultas = new javax.swing.JScrollPane();
        listaFechaProximasConsultas = new javax.swing.JList();
        paneAgregarNota = new javax.swing.JScrollPane();
        textAgregarNota = new javax.swing.JTextArea();
        labelNotaProximasConsultas = new javax.swing.JLabel();
        checkBoxRealizadaProximasConsultas = new javax.swing.JCheckBox();
        paneNotaConsultasAnteriores = new javax.swing.JScrollPane();
        textNotaConsultasAnteriores = new javax.swing.JTextArea();
        labelNotaConsultasAnteriores = new javax.swing.JLabel();
        checkBoxRealizadaConsultasAnteriores = new javax.swing.JCheckBox();
        tituloConsultasAnteriores = new javax.swing.JLabel();
        labelFechaConsultasAnteriores = new javax.swing.JLabel();
        paneFechaConsultasAnteriores = new javax.swing.JScrollPane();
        listaFechaConsultasAnteriores = new javax.swing.JList();
        tituloAgregarConsulta = new javax.swing.JLabel();
        labelFechaAgregarConsulta = new javax.swing.JLabel();
        labelNotaAgregarConsulta = new javax.swing.JLabel();
        datePickerAgregarConsulta = new org.jdesktop.swingx.JXDatePicker();
        paneNotaProximasConsultas = new javax.swing.JScrollPane();
        notaProximasConsultas = new javax.swing.JTextArea();
        checkBoxRevisadoAgregarConsulta = new javax.swing.JCheckBox();
        buttonCancelarAgregarConsulta = new javax.swing.JButton();
        buttonAceptarAgregarConsulta = new javax.swing.JButton();
        textErrorFechaAgregarConsulta = new javax.swing.JLabel();
        textErrorNoChild = new javax.swing.JLabel();
        tabCrecimiento = new javax.swing.JPanel();
        jTextFieldPeso = new javax.swing.JTextField();
        textErrorFechaAgregarCrecimiento = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButtonCanelarRegistroCrecimiento = new javax.swing.JButton();
        jLabelTit = new javax.swing.JLabel();
        jLabelErrAlt = new javax.swing.JLabel();
        labelFechaAgregarCrecimiento = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPerimetro = new javax.swing.JTextField();
        datePickerAgregarCrecimiento = new org.jdesktop.swingx.JXDatePicker();
        jButtonAceptIngresoDeCrecimiento = new javax.swing.JButton();
        jTextFieldAltura = new javax.swing.JTextField();
        jLabelErrPermie = new javax.swing.JLabel();
        jLabelErrPeso = new javax.swing.JLabel();
        graficaPerimetro = new javax.swing.JLabel();
        graficaPeso = new javax.swing.JLabel();
        graficaEstatura = new javax.swing.JLabel();
        tabVacunas = new javax.swing.JPanel();
        tituloVacunas = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaVacunas = new javax.swing.JList();
        tituloVacunaDada = new javax.swing.JLabel();
        tituloVacunaExpira = new javax.swing.JLabel();
        textVacunaFechaDada = new javax.swing.JTextField();
        textVacunaFechaExpira = new javax.swing.JTextField();
        checkBoxVacunaObligatoria = new javax.swing.JCheckBox();
        tituloAgregarVacunaDada = new javax.swing.JLabel();
        comboBoxVacunaDada = new javax.swing.JComboBox();
        tituloAgregarVacuna = new javax.swing.JLabel();
        tituloFechaVacunaDada = new javax.swing.JLabel();
        datePickerAgregarVacunaFecha = new org.jdesktop.swingx.JXDatePicker();
        buttonCancelarAgregarVacuna = new javax.swing.JButton();
        buttonAceptarAgregarVacuna = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ficha Medica");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        labelNombre.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        labelNombre.setText("Nombre:");

        labelFechaNacimiento.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        labelFechaNacimiento.setText("Fecha de Nacimiento:");

        comboBoxHijos.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        comboBoxHijos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxHijos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxHijosActionPerformed(evt);
            }
        });

        tituloHijosRegistrados.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        tituloHijosRegistrados.setText("Hijos Registrados");

        textFechaNacimiento.setEditable(false);
        textFechaNacimiento.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N

        labelNombreAgregarHijo.setText("Nombre:");

        labelFechaNacimientoAgregarHijo.setText("Fecha de Nacimiento");

        textNombreAgregarHijo.setPreferredSize(new java.awt.Dimension(6, 22));

        tituloAgregarHijo.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        tituloAgregarHijo.setText("Agregar Hijo");

        datePickerFechaNacimientoAgregarHijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePickerFechaNacimientoAgregarHijoActionPerformed(evt);
            }
        });

        buttonAceptarAgregarHijo.setText("Aceptar");
        buttonAceptarAgregarHijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAceptarAgregarHijoActionPerformed(evt);
            }
        });

        buttonCancelarAgregarHijo.setText("Cancelar");
        buttonCancelarAgregarHijo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarAgregarHijoActionPerformed(evt);
            }
        });

        textErrorNombreAgregarHijo.setText("Ingrese un Nombre");

        textErrorFechaNacimientoAgregarHijo.setText("Ingrese una Fecha de Nacimiento");

        javax.swing.GroupLayout tabHijosLayout = new javax.swing.GroupLayout(tabHijos);
        tabHijos.setLayout(tabHijosLayout);
        tabHijosLayout.setHorizontalGroup(
            tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabHijosLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tituloAgregarHijo)
                    .addGroup(tabHijosLayout.createSequentialGroup()
                        .addComponent(labelNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBoxHijos, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(labelFechaNacimiento)
                        .addGap(18, 18, 18)
                        .addComponent(textFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tituloHijosRegistrados)
                    .addGroup(tabHijosLayout.createSequentialGroup()
                        .addGroup(tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelFechaNacimientoAgregarHijo)
                            .addComponent(labelNombreAgregarHijo)
                            .addComponent(buttonCancelarAgregarHijo))
                        .addGap(26, 26, 26)
                        .addGroup(tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(textNombreAgregarHijo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(datePickerFechaNacimientoAgregarHijo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(buttonAceptarAgregarHijo))
                        .addGap(18, 18, 18)
                        .addGroup(tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textErrorNombreAgregarHijo)
                            .addComponent(textErrorFechaNacimientoAgregarHijo))))
                .addContainerGap(367, Short.MAX_VALUE))
        );
        tabHijosLayout.setVerticalGroup(
            tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabHijosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tituloHijosRegistrados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombre)
                    .addComponent(labelFechaNacimiento)
                    .addComponent(comboBoxHijos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(165, 165, 165)
                .addComponent(tituloAgregarHijo)
                .addGap(18, 18, 18)
                .addGroup(tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombreAgregarHijo)
                    .addComponent(textNombreAgregarHijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textErrorNombreAgregarHijo))
                .addGap(18, 18, 18)
                .addGroup(tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFechaNacimientoAgregarHijo)
                    .addComponent(datePickerFechaNacimientoAgregarHijo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textErrorFechaNacimientoAgregarHijo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabHijosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancelarAgregarHijo)
                    .addComponent(buttonAceptarAgregarHijo))
                .addContainerGap(169, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Hijos", tabHijos);

        tituloProximasConsultas.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        tituloProximasConsultas.setText("Proximas Consultas");

        labelFechaProximasConsultas.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        labelFechaProximasConsultas.setText("Fecha:");

        listaFechaProximasConsultas.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        listaFechaProximasConsultas.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaFechaProximasConsultas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaFechaProximasConsultasValueChanged(evt);
            }
        });
        paneFechaProximasConsultas.setViewportView(listaFechaProximasConsultas);

        textAgregarNota.setColumns(20);
        textAgregarNota.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        textAgregarNota.setRows(5);
        paneAgregarNota.setViewportView(textAgregarNota);

        labelNotaProximasConsultas.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        labelNotaProximasConsultas.setText("Nota:");

        checkBoxRealizadaProximasConsultas.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        checkBoxRealizadaProximasConsultas.setText("Realizada");
        checkBoxRealizadaProximasConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRealizadaProximasConsultasActionPerformed(evt);
            }
        });

        textNotaConsultasAnteriores.setEditable(false);
        textNotaConsultasAnteriores.setColumns(20);
        textNotaConsultasAnteriores.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        textNotaConsultasAnteriores.setRows(5);
        paneNotaConsultasAnteriores.setViewportView(textNotaConsultasAnteriores);

        labelNotaConsultasAnteriores.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        labelNotaConsultasAnteriores.setText("Nota:");

        checkBoxRealizadaConsultasAnteriores.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        checkBoxRealizadaConsultasAnteriores.setText("Realizada");
        checkBoxRealizadaConsultasAnteriores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRealizadaConsultasAnterioresActionPerformed(evt);
            }
        });

        tituloConsultasAnteriores.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        tituloConsultasAnteriores.setText("Consultas Anteriores");

        labelFechaConsultasAnteriores.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        labelFechaConsultasAnteriores.setText("Fecha:");

        listaFechaConsultasAnteriores.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        listaFechaConsultasAnteriores.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaFechaConsultasAnteriores.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaFechaConsultasAnterioresValueChanged(evt);
            }
        });
        paneFechaConsultasAnteriores.setViewportView(listaFechaConsultasAnteriores);

        tituloAgregarConsulta.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        tituloAgregarConsulta.setText("Agregar Consulta");

        labelFechaAgregarConsulta.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        labelFechaAgregarConsulta.setText("Fecha:");

        labelNotaAgregarConsulta.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        labelNotaAgregarConsulta.setText("Nota:");

        datePickerAgregarConsulta.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        datePickerAgregarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePickerAgregarConsultaActionPerformed(evt);
            }
        });

        notaProximasConsultas.setEditable(false);
        notaProximasConsultas.setColumns(20);
        notaProximasConsultas.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        notaProximasConsultas.setRows(5);
        paneNotaProximasConsultas.setViewportView(notaProximasConsultas);

        checkBoxRevisadoAgregarConsulta.setText("He revisado que los datos fueran correctos.");
        checkBoxRevisadoAgregarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRevisadoAgregarConsultaActionPerformed(evt);
            }
        });

        buttonCancelarAgregarConsulta.setText("Cancelar");
        buttonCancelarAgregarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarAgregarConsultaActionPerformed(evt);
            }
        });

        buttonAceptarAgregarConsulta.setText("Aceptar");
        buttonAceptarAgregarConsulta.setEnabled(false);
        buttonAceptarAgregarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAceptarAgregarConsultaActionPerformed(evt);
            }
        });

        textErrorFechaAgregarConsulta.setText("Ingrese Fecha de Consulta");

        textErrorNoChild.setText("Debe seleccionar un hijo");

        javax.swing.GroupLayout tabAgendaLayout = new javax.swing.GroupLayout(tabAgenda);
        tabAgenda.setLayout(tabAgendaLayout);
        tabAgendaLayout.setHorizontalGroup(
            tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabAgendaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabAgendaLayout.createSequentialGroup()
                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelFechaProximasConsultas)
                            .addComponent(paneFechaProximasConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelNotaProximasConsultas)
                            .addComponent(paneNotaProximasConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBoxRealizadaProximasConsultas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tituloConsultasAnteriores)
                            .addGroup(tabAgendaLayout.createSequentialGroup()
                                .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelFechaConsultasAnteriores)
                                    .addComponent(paneFechaConsultasAnteriores, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelNotaConsultasAnteriores)
                                    .addComponent(paneNotaConsultasAnteriores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkBoxRealizadaConsultasAnteriores))))
                        .addGap(53, 53, 53))
                    .addGroup(tabAgendaLayout.createSequentialGroup()
                        .addComponent(tituloProximasConsultas)
                        .addContainerGap(693, Short.MAX_VALUE))
                    .addGroup(tabAgendaLayout.createSequentialGroup()
                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabAgendaLayout.createSequentialGroup()
                                .addComponent(tituloAgregarConsulta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(tabAgendaLayout.createSequentialGroup()
                                .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(tabAgendaLayout.createSequentialGroup()
                                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(labelFechaAgregarConsulta)
                                            .addComponent(labelNotaAgregarConsulta))
                                        .addGap(18, 18, 18)
                                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(checkBoxRevisadoAgregarConsulta)
                                            .addComponent(datePickerAgregarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(paneAgregarNota, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(tabAgendaLayout.createSequentialGroup()
                                        .addComponent(buttonCancelarAgregarConsulta)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buttonAceptarAgregarConsulta)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textErrorFechaAgregarConsulta)
                                    .addComponent(textErrorNoChild))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        tabAgendaLayout.setVerticalGroup(
            tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabAgendaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabAgendaLayout.createSequentialGroup()
                        .addComponent(tituloConsultasAnteriores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelFechaConsultasAnteriores)
                            .addComponent(labelNotaConsultasAnteriores))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabAgendaLayout.createSequentialGroup()
                                .addComponent(paneNotaConsultasAnteriores, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBoxRealizadaConsultasAnteriores))
                            .addComponent(paneFechaConsultasAnteriores, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tabAgendaLayout.createSequentialGroup()
                        .addComponent(tituloProximasConsultas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelFechaProximasConsultas)
                            .addComponent(labelNotaProximasConsultas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(tabAgendaLayout.createSequentialGroup()
                                .addComponent(paneNotaProximasConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(checkBoxRealizadaProximasConsultas))
                            .addComponent(paneFechaProximasConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(36, 36, 36)
                .addComponent(tituloAgregarConsulta)
                .addGap(18, 18, 18)
                .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFechaAgregarConsulta)
                    .addComponent(datePickerAgregarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textErrorFechaAgregarConsulta))
                .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabAgendaLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paneAgregarNota, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelNotaAgregarConsulta)))
                    .addGroup(tabAgendaLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(textErrorNoChild)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkBoxRevisadoAgregarConsulta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabAgendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancelarAgregarConsulta)
                    .addComponent(buttonAceptarAgregarConsulta))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Agenda", tabAgenda);

        jTextFieldPeso.setMaximumSize(new java.awt.Dimension(6, 20));

        textErrorFechaAgregarCrecimiento.setText("Ingrese una fecha");

        jLabel3.setText("Perimetro Craneal:");

        jLabel1.setText("Altura:");

        jButtonCanelarRegistroCrecimiento.setText("Cancelar");
        jButtonCanelarRegistroCrecimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCanelarRegistroCrecimientoActionPerformed(evt);
            }
        });

        jLabelTit.setText("Agregar Crecimiento:");

        jLabelErrAlt.setText("Ingrese una altura");

        labelFechaAgregarCrecimiento.setText("Fecha:");

        jLabel2.setText("Peso:");

        jTextFieldPerimetro.setMaximumSize(new java.awt.Dimension(6, 20));
        jTextFieldPerimetro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPerimetroActionPerformed(evt);
            }
        });

        datePickerAgregarCrecimiento.setMaximumSize(new java.awt.Dimension(2, 20));
        datePickerAgregarCrecimiento.setMinimumSize(new java.awt.Dimension(2, 20));
        datePickerAgregarCrecimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePickerAgregarCrecimientoActionPerformed(evt);
            }
        });

        jButtonAceptIngresoDeCrecimiento.setText("Aceptar");
        jButtonAceptIngresoDeCrecimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAceptIngresoDeCrecimientoActionPerformed(evt);
            }
        });

        jTextFieldAltura.setMaximumSize(new java.awt.Dimension(6, 20));

        jLabelErrPermie.setText("Ingrese un perimetro craneal");

        jLabelErrPeso.setText("Ingrese un peso");

        graficaPerimetro.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        graficaPerimetro.setMaximumSize(new java.awt.Dimension(353, 251));
        graficaPerimetro.setMinimumSize(new java.awt.Dimension(353, 251));
        graficaPerimetro.setPreferredSize(new java.awt.Dimension(353, 251));

        graficaPeso.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        graficaPeso.setMaximumSize(new java.awt.Dimension(353, 251));
        graficaPeso.setMinimumSize(new java.awt.Dimension(353, 251));
        graficaPeso.setPreferredSize(new java.awt.Dimension(353, 251));

        graficaEstatura.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        graficaEstatura.setMaximumSize(new java.awt.Dimension(353, 251));
        graficaEstatura.setMinimumSize(new java.awt.Dimension(353, 251));
        graficaEstatura.setPreferredSize(new java.awt.Dimension(353, 251));

        javax.swing.GroupLayout tabCrecimientoLayout = new javax.swing.GroupLayout(tabCrecimiento);
        tabCrecimiento.setLayout(tabCrecimientoLayout);
        tabCrecimientoLayout.setHorizontalGroup(
            tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCrecimientoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(graficaPerimetro, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                    .addComponent(graficaEstatura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCrecimientoLayout.createSequentialGroup()
                        .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTit)
                            .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextFieldPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(tabCrecimientoLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(16, 16, 16)
                                        .addComponent(jTextFieldPerimetro, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextFieldAltura, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)
                                .addGroup(tabCrecimientoLayout.createSequentialGroup()
                                    .addComponent(labelFechaAgregarCrecimiento)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(datePickerAgregarCrecimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(tabCrecimientoLayout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jButtonCanelarRegistroCrecimiento)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textErrorFechaAgregarCrecimiento)
                            .addComponent(jLabelErrPermie)
                            .addComponent(jLabelErrAlt)
                            .addComponent(jLabelErrPeso)
                            .addComponent(jButtonAceptIngresoDeCrecimiento)))
                    .addComponent(graficaPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tabCrecimientoLayout.setVerticalGroup(
            tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabCrecimientoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabCrecimientoLayout.createSequentialGroup()
                        .addComponent(graficaPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jLabelTit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelFechaAgregarCrecimiento)
                            .addComponent(datePickerAgregarCrecimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textErrorFechaAgregarCrecimiento))
                        .addGap(18, 18, 18)
                        .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldAltura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelErrAlt))
                        .addGap(18, 18, 18)
                        .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabelErrPeso))
                        .addGap(18, 18, 18)
                        .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextFieldPerimetro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelErrPermie))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(tabCrecimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonCanelarRegistroCrecimiento)
                            .addComponent(jButtonAceptIngresoDeCrecimiento)))
                    .addGroup(tabCrecimientoLayout.createSequentialGroup()
                        .addComponent(graficaEstatura, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(graficaPerimetro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(95, 95, 95))
        );

        tabbedPane.addTab("Crecimiento y Desarrollo", tabCrecimiento);

        tituloVacunas.setText("Vacunas");

        listaVacunas.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listaVacunas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaVacunasValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaVacunas);

        tituloVacunaDada.setText("Dada:");

        tituloVacunaExpira.setText("Expira:");

        textVacunaFechaDada.setEditable(false);

        textVacunaFechaExpira.setEditable(false);

        checkBoxVacunaObligatoria.setText("Obligatoria");
        checkBoxVacunaObligatoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxVacunaObligatoriaActionPerformed(evt);
            }
        });

        tituloAgregarVacunaDada.setText("Agregar Vacuna Dada:");

        comboBoxVacunaDada.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tituloAgregarVacuna.setText("Vacuna:");

        tituloFechaVacunaDada.setText("Fecha Dada:");

        buttonCancelarAgregarVacuna.setText("Cancelar");
        buttonCancelarAgregarVacuna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarAgregarVacunaActionPerformed(evt);
            }
        });

        buttonAceptarAgregarVacuna.setText("Aceptar");
        buttonAceptarAgregarVacuna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAceptarAgregarVacunaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabVacunasLayout = new javax.swing.GroupLayout(tabVacunas);
        tabVacunas.setLayout(tabVacunasLayout);
        tabVacunasLayout.setHorizontalGroup(
            tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabVacunasLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tituloVacunas)
                    .addGroup(tabVacunasLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabVacunasLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tituloVacunaDada)
                                    .addComponent(tituloVacunaExpira))
                                .addGap(37, 37, 37)
                                .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textVacunaFechaDada, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                    .addComponent(textVacunaFechaExpira)))
                            .addComponent(checkBoxVacunaObligatoria)))
                    .addComponent(tituloAgregarVacunaDada)
                    .addGroup(tabVacunasLayout.createSequentialGroup()
                        .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tituloAgregarVacuna)
                            .addComponent(tituloFechaVacunaDada)
                            .addGroup(tabVacunasLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(buttonCancelarAgregarVacuna)))
                        .addGap(32, 32, 32)
                        .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonAceptarAgregarVacuna)
                            .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(datePickerAgregarVacunaFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(comboBoxVacunaDada, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(366, Short.MAX_VALUE))
        );
        tabVacunasLayout.setVerticalGroup(
            tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabVacunasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tituloVacunas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tabVacunasLayout.createSequentialGroup()
                        .addComponent(checkBoxVacunaObligatoria)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tituloVacunaDada)
                            .addComponent(textVacunaFechaDada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tituloVacunaExpira)
                            .addComponent(textVacunaFechaExpira, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(67, 67, 67)
                .addComponent(tituloAgregarVacunaDada)
                .addGap(18, 18, 18)
                .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxVacunaDada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tituloAgregarVacuna))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tituloFechaVacunaDada)
                    .addComponent(datePickerAgregarVacunaFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabVacunasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAceptarAgregarVacuna)
                    .addComponent(buttonCancelarAgregarVacuna))
                .addContainerGap(157, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Vacunas", tabVacunas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setBounds(0, 0, 833, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void datePickerFechaNacimientoAgregarHijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePickerFechaNacimientoAgregarHijoActionPerformed
        Date fecha = datePickerFechaNacimientoAgregarHijo.getDate();
        fechaNacimiento = fecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }//GEN-LAST:event_datePickerFechaNacimientoAgregarHijoActionPerformed

    private void buttonAceptarAgregarHijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAceptarAgregarHijoActionPerformed
        //Checkeo de campos
        //Nombre y Fecha de Nacimiento
        if (textNombreAgregarHijo.getText().isEmpty() && fechaNacimiento == null) {
            textErrorNombreAgregarHijo.setVisible(true);
            textErrorFechaNacimientoAgregarHijo.setVisible(true);
        }
        //Nombre
        else if(textNombreAgregarHijo.getText().isEmpty()){
            textErrorNombreAgregarHijo.setVisible(true);
            textErrorFechaNacimientoAgregarHijo.setVisible(false);
        }
        //Fecha de Nacimiento
        else if(fechaNacimiento == null){
            textErrorNombreAgregarHijo.setVisible(false);
            textErrorFechaNacimientoAgregarHijo.setVisible(true);
        }
        //Agrego Hijo
        else{        
            String nombre = textNombreAgregarHijo.getText(); 
            if (sistema.ingresarHijoCheck(nombre, fechaNacimiento)) {
                sistema.ingresarHijo(nombre,fechaNacimiento);
                textNombreAgregarHijo.setText("");
                fechaNacimiento = null; 
                textErrorNombreAgregarHijo.setVisible(false);
                textErrorFechaNacimientoAgregarHijo.setVisible(false);
                comboBoxHijos.setModel(new DefaultComboBoxModel(sistema.getListAllChildren().toArray()));
                this.cargarHijoDelComboBox();
                this.cargarAppointmentDeHijo();
                this.cargarVacunasHijo();
            }                  
        }
    }//GEN-LAST:event_buttonAceptarAgregarHijoActionPerformed

    private void buttonCancelarAgregarHijoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarAgregarHijoActionPerformed
        textNombreAgregarHijo.setText("");
        fechaNacimiento = null; 
        datePickerFechaNacimientoAgregarHijo.setDate(null);
    }//GEN-LAST:event_buttonCancelarAgregarHijoActionPerformed

    private void comboBoxHijosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxHijosActionPerformed
        this.cargarHijoDelComboBox();
        this.cargarAppointmentDeHijo();
        this.cargarVacunasHijo();
        this.updateChart();
    }//GEN-LAST:event_comboBoxHijosActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try{
            FileOutputStream fileOut = new FileOutputStream("data.dat");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(sistema);
            out.close();
            fileOut.close();
        }
        catch(IOException i){
            i.printStackTrace();
        } 
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void datePickerAgregarCrecimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePickerAgregarCrecimientoActionPerformed
        Date fecha = datePickerAgregarCrecimiento.getDate();
        fechaCrecimiento = fecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }//GEN-LAST:event_datePickerAgregarCrecimientoActionPerformed

    private void jButtonCanelarRegistroCrecimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCanelarRegistroCrecimientoActionPerformed
        jTextFieldAltura.setText("");
        jTextFieldPeso.setText("");
        jTextFieldPerimetro.setText("");
        datePickerAgregarCrecimiento.setDate(null);
        textErrorFechaAgregarCrecimiento.setVisible(false);
        jLabelErrAlt.setVisible(false);
        jLabelErrPeso.setVisible(false);
        jLabelErrPermie.setVisible(false);
    }//GEN-LAST:event_jButtonCanelarRegistroCrecimientoActionPerformed

    private void jButtonAceptIngresoDeCrecimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAceptIngresoDeCrecimientoActionPerformed
        //Todos Campos Vacios
        if (jTextFieldAltura.getText().isEmpty() && jTextFieldPeso.getText().isEmpty() && jTextFieldPerimetro.getText().isEmpty() && fechaCrecimiento == null) {
            textErrorFechaAgregarCrecimiento.setVisible(true);
            jLabelErrAlt.setVisible(true);
            jLabelErrPeso.setVisible(true);
            jLabelErrPermie.setVisible(true);
        }else if(jTextFieldAltura.getText().isEmpty() && jTextFieldPeso.getText().isEmpty() && jTextFieldPerimetro.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(false);
            jLabelErrAlt.setVisible(true);
            jLabelErrPeso.setVisible(true);
            jLabelErrPermie.setVisible(true);
        }else if(jTextFieldAltura.getText().isEmpty() && jTextFieldPeso.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(false);
            jLabelErrAlt.setVisible(true);
            jLabelErrPeso.setVisible(true);
            jLabelErrPermie.setVisible(false);
        }else if(jTextFieldAltura.getText().isEmpty() && jTextFieldPerimetro.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(false);
            jLabelErrAlt.setVisible(true);
            jLabelErrPeso.setVisible(false);
            jLabelErrPermie.setVisible(true);
        }else if(jTextFieldPeso.getText().isEmpty() && jTextFieldPerimetro.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(false);
            jLabelErrAlt.setVisible(false);
            jLabelErrPeso.setVisible(true);
            jLabelErrPermie.setVisible(true);
        }else if(fechaCrecimiento == null && jTextFieldAltura.getText().isEmpty() && jTextFieldPeso.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(true);
            jLabelErrAlt.setVisible(true);
            jLabelErrPeso.setVisible(true);
            jLabelErrPermie.setVisible(false);
        }else if(fechaCrecimiento == null && jTextFieldAltura.getText().isEmpty() && jTextFieldPerimetro.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(true);
            jLabelErrAlt.setVisible(true);
            jLabelErrPeso.setVisible(false);
            jLabelErrPermie.setVisible(true);
        }else if(fechaCrecimiento == null && jTextFieldPeso.getText().isEmpty() && jTextFieldPerimetro.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(true);
            jLabelErrAlt.setVisible(false);
            jLabelErrPeso.setVisible(true);
            jLabelErrPermie.setVisible(true);
        }else if(fechaCrecimiento == null && jTextFieldAltura.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(true);
            jLabelErrAlt.setVisible(true);
            jLabelErrPeso.setVisible(false);
            jLabelErrPermie.setVisible(false);
        }else if(fechaCrecimiento == null && jTextFieldPeso.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(true);
            jLabelErrAlt.setVisible(false);
            jLabelErrPeso.setVisible(true);
            jLabelErrPermie.setVisible(false);
        }else if(fechaCrecimiento == null && jTextFieldPerimetro.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(true);
            jLabelErrAlt.setVisible(false);
            jLabelErrPeso.setVisible(false);
             jLabelErrPermie.setVisible(true);
        }else if(fechaCrecimiento == null){
            textErrorFechaAgregarCrecimiento.setVisible(true);
            jLabelErrAlt.setVisible(false);
            jLabelErrPeso.setVisible(false);
            jLabelErrPermie.setVisible(false);
        }else if(jTextFieldAltura.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(false);
            jLabelErrAlt.setVisible(true);
            jLabelErrPeso.setVisible(false);
            jLabelErrPermie.setVisible(false);
        } else if(jTextFieldPeso.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(false);
            jLabelErrPeso.setVisible(true);
            jLabelErrAlt.setVisible(false);
            jLabelErrPermie.setVisible(false);
        } else if(jTextFieldPerimetro.getText().isEmpty()){
            textErrorFechaAgregarCrecimiento.setVisible(false);
            jLabelErrAlt.setVisible(false);
            jLabelErrPeso.setVisible(false);
            jLabelErrPermie.setVisible(true);
        }else{
            try {      
                //Get data from form
                int altura = Integer.parseInt(jTextFieldAltura.getText());
                int peso = Integer.parseInt(jTextFieldPeso.getText());
                int perimetro = Integer.parseInt(jTextFieldPerimetro.getText());
                //Evaluate data
                if (altura > 0 && peso > 0 && perimetro > 0) {
                    selectedChild.addGrowth(fechaCrecimiento, altura, peso, perimetro);
                    //Warnings Reset
                    textErrorFechaAgregarCrecimiento.setVisible(false);
                    jLabelErrAlt.setVisible(false);
                    jLabelErrPeso.setVisible(false);
                    jLabelErrPermie.setVisible(false);
                    //Clear input
                    datePickerAgregarCrecimiento.setDate(null);
                    jTextFieldAltura.setText("");
                    jTextFieldPeso.setText("");
                    jTextFieldPerimetro.setText("");
                    //Actualizar Grafica
                    updateChart();
                }
                jLabelErrAlt.setVisible(true);
                jLabelErrPeso.setVisible(true);
                jLabelErrPermie.setVisible(true);
            } catch (NumberFormatException e) {
                
                jLabelErrAlt.setVisible(true);
                jLabelErrPeso.setVisible(true);
                jLabelErrPermie.setVisible(true);
            }
        }      
    }//GEN-LAST:event_jButtonAceptIngresoDeCrecimientoActionPerformed

    private void jTextFieldPerimetroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPerimetroActionPerformed
    }//GEN-LAST:event_jTextFieldPerimetroActionPerformed

    private void datePickerAgregarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePickerAgregarConsultaActionPerformed
        Date fecha = datePickerAgregarConsulta.getDate();
        fechaConsulta = fecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }//GEN-LAST:event_datePickerAgregarConsultaActionPerformed

    private void checkBoxRevisadoAgregarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRevisadoAgregarConsultaActionPerformed
        // TODO add your handling code here:
        if (checkBoxRevisadoAgregarConsulta.isSelected()) {
            buttonAceptarAgregarConsulta.setEnabled(true);
        }
        else{
            buttonAceptarAgregarConsulta.setEnabled(false);
        }    
    }//GEN-LAST:event_checkBoxRevisadoAgregarConsultaActionPerformed

    private void buttonCancelarAgregarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarAgregarConsultaActionPerformed
        datePickerAgregarConsulta.setDate(null);
        textAgregarNota.setText("");
        buttonAceptarAgregarConsulta.setEnabled(false);
        checkBoxRevisadoAgregarConsulta.setSelected(false);
    }//GEN-LAST:event_buttonCancelarAgregarConsultaActionPerformed

    private void buttonAceptarAgregarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAceptarAgregarConsultaActionPerformed
        if (selectedChild == null && fechaConsulta == null) {
            textErrorFechaAgregarConsulta.setVisible(true);
            textErrorNoChild.setVisible(true);
        }
        else if(selectedChild == null){
            textErrorFechaAgregarConsulta.setVisible(false);
            textErrorNoChild.setVisible(true);
        }
        else if(fechaConsulta == null){
            textErrorFechaAgregarConsulta.setVisible(true);
            textErrorNoChild.setVisible(false);
        }
        else{
            //Tomo nota ingresada por el usuario
            String nota = textAgregarNota.getText();
            //Creo y agrego la consulta al hijo seleccionado
            selectedChild.addAppointment(nota, fechaConsulta);
            //Saco los carteles de error
            textErrorFechaAgregarConsulta.setVisible(false);
            textErrorNoChild.setVisible(false);
            //Cargo nuevamente las consultas del hijo seleccionado a las listas
            this.cargarAppointmentDeHijo();
            //Elimino datos del formulario de agregar consulta
            datePickerAgregarConsulta.setDate(null);
            textAgregarNota.setText("");
            checkBoxRevisadoAgregarConsulta.setSelected(false);
            buttonAceptarAgregarConsulta.setEnabled(false);
        }
    }//GEN-LAST:event_buttonAceptarAgregarConsultaActionPerformed

    private void listaFechaProximasConsultasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaFechaProximasConsultasValueChanged
        //This line prevents double events
        if (!evt.getValueIsAdjusting()) {
        }     
        else{  
            //Obtengo lugar en el ArrayList de Consultas Proximas
            int indexConsulta = listaFechaProximasConsultas.getSelectedIndex();
            //Obtengo la nota de ese ArrayList y setteo la nota en el cuadro de texto
            String nota = consultasProximas.get(indexConsulta).getNote();
            notaProximasConsultas.setText(nota);
            //Obtengo el estado de la consulta, si fue o no realizada y lo reflejo en el checkbox
            boolean realizada = consultasProximas.get(indexConsulta).getAttended();
            checkBoxRealizadaProximasConsultas.setSelected(realizada);
        }
    }//GEN-LAST:event_listaFechaProximasConsultasValueChanged

    private void checkBoxRealizadaProximasConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRealizadaProximasConsultasActionPerformed
        //Obtengo index de Consulta de lista visible
        int indexConsulta = listaFechaProximasConsultas.getSelectedIndex();
        //Obtengo estado del checkbox
        boolean realizada = checkBoxRealizadaProximasConsultas.isSelected();
        //Obtengo el Appointment del index obtenido
        Appointment ap = consultasProximas.get(indexConsulta);
        //Recorro la lista original y checkeo que el objeto de la lista visible sea el mismo que el de la lista logica
        for (int i = 0; i < selectedChild.getListAppointments().size(); i++) {
            Appointment original = selectedChild.getListAppointments().get(i);
            if (original.equals(ap)) {
                //Si son iguales setteo en el original, el estado del checkbox
                original.setAttended(realizada);
            }
        }
    }//GEN-LAST:event_checkBoxRealizadaProximasConsultasActionPerformed

    private void listaFechaConsultasAnterioresValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaFechaConsultasAnterioresValueChanged
        //This line prevents double events
        if (!evt.getValueIsAdjusting()) {
        }     
        else{  
            //Obtengo lugar en el ArrayList de Consultas Anteriores
            int indexConsulta = listaFechaConsultasAnteriores.getSelectedIndex();
            //Obtengo la nota de ese ArrayList y setteo la nota en el cuadro de texto
            String nota = consultasAnteriores.get(indexConsulta).getNote();
            textNotaConsultasAnteriores.setText(nota);
            //Obtengo el estado de la consulta, si fue o no realizada y lo reflejo en el checkbox
            boolean realizada = consultasAnteriores.get(indexConsulta).getAttended();
            checkBoxRealizadaConsultasAnteriores.setSelected(realizada);
        }
    }//GEN-LAST:event_listaFechaConsultasAnterioresValueChanged

    private void checkBoxRealizadaConsultasAnterioresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRealizadaConsultasAnterioresActionPerformed
        //Obtengo index de Consulta de lista visible
        int indexConsulta = listaFechaConsultasAnteriores.getSelectedIndex();
        //Obtengo estado del checkbox
        boolean realizada = checkBoxRealizadaConsultasAnteriores.isSelected();
        //Obtengo el Appointment del index obtenido
        Appointment ap = consultasAnteriores.get(indexConsulta);
        //Recorro la lista original y checkeo que el objeto de la lista visible sea el mismo que el de la lista logica
        for (int i = 0; i < selectedChild.getListAppointments().size(); i++) {
            Appointment original = selectedChild.getListAppointments().get(i);
            if (original.equals(ap)) {
                //Si son iguales setteo en el original, el estado del checkbox
                original.setAttended(realizada);
            }
        }
    }//GEN-LAST:event_checkBoxRealizadaConsultasAnterioresActionPerformed

    private void listaVacunasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaVacunasValueChanged
        //This line prevents double events
        if (!evt.getValueIsAdjusting()) {
        }     
        else{  
            //Obtengo lugar en el ArrayList de Vacunas
            int indexVacuna = listaVacunas.getSelectedIndex();
            //Setteo Fechas en TextFields
            if(selectedChild.getListVaccines().get(indexVacuna).getReceivedDate() != null){
                textVacunaFechaDada.setText(""+selectedChild.getListVaccines().get(indexVacuna).getReceivedDate());
            }
            else{
                textVacunaFechaDada.setText("No Dada");
            }
            if (!selectedChild.getListVaccines().get(indexVacuna).getExpirationMonths().isEmpty()) {
                textVacunaFechaExpira.setText(""+selectedChild.getListVaccines().get(indexVacuna).getExpirationMonths().get(0));
            }
            else{
                textVacunaFechaExpira.setText(""+selectedChild.getBirthDate());
            }           
            //Obtengo si la vacuna es obligatoria y setteo el checkBox
            checkBoxVacunaObligatoria.setSelected(selectedChild.getListVaccines().get(indexVacuna).getMandatory());
        }
    }//GEN-LAST:event_listaVacunasValueChanged

    private void checkBoxVacunaObligatoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxVacunaObligatoriaActionPerformed
        // TODO add your handling code here:
        checkBoxVacunaObligatoria.setSelected(!checkBoxVacunaObligatoria.isSelected());
    }//GEN-LAST:event_checkBoxVacunaObligatoriaActionPerformed

    private void buttonCancelarAgregarVacunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarAgregarVacunaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonCancelarAgregarVacunaActionPerformed

    private void buttonAceptarAgregarVacunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAceptarAgregarVacunaActionPerformed
        // TODO add your handling code here:
        Date fecha = datePickerAgregarVacunaFecha.getDate();
        if (fecha != null) {
            LocalDate fechaAgregarVacuna = fecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            for (int i = 0; i < selectedChild.getListVaccines().size(); i++) {
                Vaccine vac = selectedChild.getListVaccines().get(i);
                if (comboBoxVacunaDada.getModel().getSelectedItem().equals(vac)) {
                    selectedChild.addReceivedVaccine(vac, fechaAgregarVacuna); 
                    this.cargarVacunasHijo();
                }
            } 
        }
        
    }//GEN-LAST:event_buttonAceptarAgregarVacunaActionPerformed

    private void cargarHijoDelComboBox(){
        for (int i = 0; i < sistema.getListAllChildren().size(); i++) {
            Child h = sistema.getListAllChildren().get(i);
            if (comboBoxHijos.getModel().getSelectedItem().equals(h)) {
                selectedChild = h;
                textFechaNacimiento.setText(""+selectedChild.getBirthDate());
            }
        } 
    }
    
    private void cargarVacunasHijo(){
        if (selectedChild != null) {               
            listaVacunas.setListData(selectedChild.getListVaccines().toArray());
            comboBoxVacunaDada.setModel(new DefaultComboBoxModel(selectedChild.getListVaccines().toArray()));
        }
    }
    
    private void cargarAppointmentDeHijo(){
        consultasProximas = new ArrayList<Appointment>();
        consultasAnteriores = new ArrayList<Appointment>();
        if (selectedChild != null) {
            for (int i = 0; i < selectedChild.getListAppointments().size(); i++) {
                if (selectedChild.getListAppointments().get(i).getAppointmentDate().isAfter(LocalDate.now())) {
                    consultasProximas.add(selectedChild.getListAppointments().get(i));
                }
                else{
                    consultasAnteriores.add(selectedChild.getListAppointments().get(i));
                }
            }
            listaFechaConsultasAnteriores.setListData(consultasAnteriores.toArray());
            listaFechaProximasConsultas.setListData(consultasProximas.toArray());
        }
    } 
    
    private void updateChart() {
        //Estatura
        XYDataset datasetEstatura = createXYdatasetEstatura();       
        JFreeChart chartEstatura = createChart("Estatura", "Edad (en meses cumplidos)", "Estatura(cm)", datasetEstatura);
        BufferedImage imageEstatura = chartEstatura.createBufferedImage(364, 251);
        graficaEstatura.setIcon(new ImageIcon(imageEstatura));  
        //Peso
        XYDataset datasetPeso = createXYdatasetPeso();       
        JFreeChart chartPeso = createChart("Peso", "Edad (en meses cumplidos)", "Peso(kg)", datasetPeso);
        BufferedImage imagePeso = chartPeso.createBufferedImage(364, 251);
        graficaPeso.setIcon(new ImageIcon(imagePeso)); 
        //Perimetro Craneal
        XYDataset datasetPerimetro = createXYdatasetPerimetro();       
        JFreeChart chartPerimetro = createChart("Peso", "Edad (en meses cumplidos)", "Peso(kg)", datasetPerimetro);
        BufferedImage imagePerimetro = chartPerimetro.createBufferedImage(364, 251);
        graficaPerimetro.setIcon(new ImageIcon(imagePerimetro)); 
    }
    
    private XYDataset createXYdatasetEstatura() {
        XYSeries series = new XYSeries("");
        if (selectedChild != null) {
            for (int i = 0; i < selectedChild.getListGrowth().size(); i++) {
                int ageInMonths = (selectedChild.getBirthDate().getYear() * 12) + selectedChild.getBirthDate().getMonthValue();
                int dateInMonths = (selectedChild.getListGrowth().get(i).getDate().getYear() * 12) + selectedChild.getListGrowth().get(i).getDate().getMonthValue();
                series.add((dateInMonths - ageInMonths), selectedChild.getListGrowth().get(i).getHeight());
            }
        }   
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        return dataset;
    }
    
       private XYDataset createXYdatasetPeso() {
        XYSeries series = new XYSeries("");
        if (selectedChild != null) {
            for (int i = 0; i < selectedChild.getListGrowth().size(); i++) {
                int ageInMonths = (selectedChild.getBirthDate().getYear() * 12) + selectedChild.getBirthDate().getMonthValue();
                int dateInMonths = (selectedChild.getListGrowth().get(i).getDate().getYear() * 12) + selectedChild.getListGrowth().get(i).getDate().getMonthValue();
                series.add((dateInMonths - ageInMonths), selectedChild.getListGrowth().get(i).getWeight());
            }
        }   
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        return dataset;
    }
       
       private XYDataset createXYdatasetPerimetro() {
        XYSeries series = new XYSeries("");
        if (selectedChild != null) {
            for (int i = 0; i < selectedChild.getListGrowth().size(); i++) {
                int ageInMonths = (selectedChild.getBirthDate().getYear() * 12) + selectedChild.getBirthDate().getMonthValue();
                int dateInMonths = (selectedChild.getListGrowth().get(i).getDate().getYear() * 12) + selectedChild.getListGrowth().get(i).getDate().getMonthValue();
                series.add((dateInMonths - ageInMonths), selectedChild.getListGrowth().get(i).getCranialPerimeter());
            }
        }   
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        return dataset;
    }
    
    private JFreeChart createChart(String title, String xAxis, String yAxis, XYDataset dataset) {
        JFreeChart chart = ChartFactory.createXYLineChart(
            title,      // chart title
            xAxis,                      // x axis label
            yAxis,                      // y axis label
            dataset,                  // data
            PlotOrientation.VERTICAL,
            false,                     // include legend
            true,                     // tooltips
            false                     // urls
        );
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setRangeGridlinesVisible(true);
        plot.setBackgroundAlpha(0.5f);
        plot.getDomainAxis().setRange(0, 60);
        plot.getRangeAxis().setRange(45, 125);
        return chart;
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAceptarAgregarConsulta;
    private javax.swing.JButton buttonAceptarAgregarHijo;
    private javax.swing.JButton buttonAceptarAgregarVacuna;
    private javax.swing.JButton buttonCancelarAgregarConsulta;
    private javax.swing.JButton buttonCancelarAgregarHijo;
    private javax.swing.JButton buttonCancelarAgregarVacuna;
    private javax.swing.JCheckBox checkBoxRealizadaConsultasAnteriores;
    private javax.swing.JCheckBox checkBoxRealizadaProximasConsultas;
    private javax.swing.JCheckBox checkBoxRevisadoAgregarConsulta;
    private javax.swing.JCheckBox checkBoxVacunaObligatoria;
    private javax.swing.JComboBox comboBoxHijos;
    private javax.swing.JComboBox comboBoxVacunaDada;
    private org.jdesktop.swingx.JXDatePicker datePickerAgregarConsulta;
    private org.jdesktop.swingx.JXDatePicker datePickerAgregarCrecimiento;
    private org.jdesktop.swingx.JXDatePicker datePickerAgregarVacunaFecha;
    private org.jdesktop.swingx.JXDatePicker datePickerFechaNacimientoAgregarHijo;
    private javax.swing.JLabel graficaEstatura;
    private javax.swing.JLabel graficaPerimetro;
    private javax.swing.JLabel graficaPeso;
    private javax.swing.JButton jButtonAceptIngresoDeCrecimiento;
    private javax.swing.JButton jButtonCanelarRegistroCrecimiento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelErrAlt;
    private javax.swing.JLabel jLabelErrPermie;
    private javax.swing.JLabel jLabelErrPeso;
    private javax.swing.JLabel jLabelTit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldAltura;
    private javax.swing.JTextField jTextFieldPerimetro;
    private javax.swing.JTextField jTextFieldPeso;
    private javax.swing.JLabel labelFechaAgregarConsulta;
    private javax.swing.JLabel labelFechaAgregarCrecimiento;
    private javax.swing.JLabel labelFechaConsultasAnteriores;
    private javax.swing.JLabel labelFechaNacimiento;
    private javax.swing.JLabel labelFechaNacimientoAgregarHijo;
    private javax.swing.JLabel labelFechaProximasConsultas;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelNombreAgregarHijo;
    private javax.swing.JLabel labelNotaAgregarConsulta;
    private javax.swing.JLabel labelNotaConsultasAnteriores;
    private javax.swing.JLabel labelNotaProximasConsultas;
    private javax.swing.JList listaFechaConsultasAnteriores;
    private javax.swing.JList listaFechaProximasConsultas;
    private javax.swing.JList listaVacunas;
    private javax.swing.JTextArea notaProximasConsultas;
    private javax.swing.JScrollPane paneAgregarNota;
    private javax.swing.JScrollPane paneFechaConsultasAnteriores;
    private javax.swing.JScrollPane paneFechaProximasConsultas;
    private javax.swing.JScrollPane paneNotaConsultasAnteriores;
    private javax.swing.JScrollPane paneNotaProximasConsultas;
    private javax.swing.JPanel tabAgenda;
    private javax.swing.JPanel tabCrecimiento;
    private javax.swing.JPanel tabHijos;
    private javax.swing.JPanel tabVacunas;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextArea textAgregarNota;
    private javax.swing.JLabel textErrorFechaAgregarConsulta;
    private javax.swing.JLabel textErrorFechaAgregarCrecimiento;
    private javax.swing.JLabel textErrorFechaNacimientoAgregarHijo;
    private javax.swing.JLabel textErrorNoChild;
    private javax.swing.JLabel textErrorNombreAgregarHijo;
    private javax.swing.JTextField textFechaNacimiento;
    private javax.swing.JTextField textNombreAgregarHijo;
    private javax.swing.JTextArea textNotaConsultasAnteriores;
    private javax.swing.JTextField textVacunaFechaDada;
    private javax.swing.JTextField textVacunaFechaExpira;
    private javax.swing.JLabel tituloAgregarConsulta;
    private javax.swing.JLabel tituloAgregarHijo;
    private javax.swing.JLabel tituloAgregarVacuna;
    private javax.swing.JLabel tituloAgregarVacunaDada;
    private javax.swing.JLabel tituloConsultasAnteriores;
    private javax.swing.JLabel tituloFechaVacunaDada;
    private javax.swing.JLabel tituloHijosRegistrados;
    private javax.swing.JLabel tituloProximasConsultas;
    private javax.swing.JLabel tituloVacunaDada;
    private javax.swing.JLabel tituloVacunaExpira;
    private javax.swing.JLabel tituloVacunas;
    // End of variables declaration//GEN-END:variables
}
